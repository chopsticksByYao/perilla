<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans.xsd    
        http://www.springframework.org/schema/mvc   
        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd    
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context.xsd  
        http://www.springframework.org/schema/tx    
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">  
  
    <!-- Mybatis 和 Spring的整合 -->  
    <!-- 1.数据源：DriverManagerDataSource -->  
    <!-- <bean id="dataSource"  
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>  
        <property name="url" value="jdbc:mysql://localhost:3306/test"></property>  
        <property name="username" value="mysql"></property>  
        <property name="password" value="mysql"></property>  
    </bean>   -->
    <!-- 配置自定义扫描包 -->  
    <context:component-scan base-package="com.perilla.**.service"/>
    <!-- 配置自定义扫描包 -->  
    <context:component-scan base-package="com.perilla.**.dao"/>  
    <!--读取配置文件 -->
	<context:property-placeholder location="classpath*:properties/db.properties"/>	
	
	<!--数据源 配置 c3p0  -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${driver}" />
		<property name="jdbcUrl" value="${url}" />
		<property name="user" value="${user}" />
		<property name="password" value="${passwd}" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数  -->
        <property name="acquireIncrement" value="5"></property>
        <!-- 初始连接池大小 -->
        <property name="initialPoolSize" value="10"></property>
        <!-- 连接池中连接最小个数 -->
        <property name="minPoolSize" value="5"></property>
        <!-- 连接池中连接最大个数 -->
        <property name="maxPoolSize" value="20"></property>
	</bean>
    
  
    <!-- Mybatis 的 SqlSession的工厂：SqlSessionFactoryBean dataSource引用数据源 Mybatis 定义数据源，统一加载配置 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
        <!-- 指定sqlMapConfig总配置文件-->
        <property name="configLocation" value="classpath:config/platform/mybatis-config.xml"></property>
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:config/mybatis/*.xml"></property> 
    </bean>  
  
    <!--  Mybatis自动扫描加载Sql映射文件/接口：MapperScannerConfigurer sqlSessionFactory   
        basePackage:指定sql映射文件/接口所在的包（自动扫描） -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="com.perilla.**.dao"/>
	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
  
    <!-- 事务管理器 -->  
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource"></property>  
    </bean> 
    
    <!-- spring 事务传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="txManager"> 
        <tx:attributes> 
        	<!-- REQUIRED:如果当前没有事务则新增事务，如果已有则用现有的事务  -->
            <tx:method name="save*" propagation="REQUIRED" /> 
            <tx:method name="delete*" propagation="REQUIRED" /> 
            <tx:method name="update*" propagation="REQUIRED" /> 
            <tx:method name="query*" propagation="REQUIRED" read-only="true"/> 
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/> 
            <tx:method name="set*" propagation="REQUIRED" /> 
            <!-- 如果当前没有事务则以非事务方式运行  read-only：对于数据库是否只读-->
            <tx:method name="*" propagation="SUPPORTS" read-only="true" /> 
        </tx:attributes> 
    </tx:advice> 
    
    <!-- aop代理 -->
    <aop:config expose-proxy="true">
        <!-- 切入点  -->
        <aop:pointcut id="txPointcut" expression="execution(* com.perilla.**.service.*.*(..))" />
        <!-- 定义通知器 定义哪一个advice在哪一个切入点上面起作用 -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config> 
  
    <!-- 支持注解方式，指定事务管理器 -->  
    <tx:annotation-driven transaction-manager="txManager" />  
  
</beans>